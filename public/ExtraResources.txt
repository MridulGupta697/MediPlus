<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MediPlus</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html,
        body {
            font-family: 'Poppins', sans-serif;
            scroll-behavior: smooth;
            min-height: 100%;
        }

        body {
            display: flex;
            flex-direction: column;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        .top-navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            flex-wrap: wrap;
            padding: 0.8rem 2rem;
            border-bottom: 1px solid #ccc;
            z-index: 1000;
            backdrop-filter: blur(6px);
            gap: 0.5rem;
        }

        .top-navbar .logo {
            font-size: 1.8rem;
            font-weight: 700;
        }

        .top-navbar .logo span:first-child {
            color: #222;
        }

        .top-navbar .logo span:last-child {
            color: #008000;
        }

        .auth-links {
            display: flex;
            align-items: center;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: flex-end;
            gap: 0.6rem;
        }

        .auth-links a {
            margin-left: 1.2rem;
            color: #006400;
            font-weight: 500;
            transition: 0.3s;
        }

        .auth-links a:hover {
            color: #004d00;
        }

        #user-section {
            margin-top: 0.5rem;
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .sub-navbar {
            position: sticky;
            top: 82px;
            /* Approx height of top-navbar + border */
            left: 0;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.6);
            color: #006400;
            backdrop-filter: blur(8px);
            display: flex;
            justify-content: center;
            padding: 0.6rem 0;
            border-bottom: 1px solid #ccc;
            z-index: 999;
        }

        .sub-navbar a {
            margin: 0 2rem;
            font-weight: 600;
            color: #006400;
            text-decoration: none;
            transition: color 0.3s ease, transform 0.2s ease;
        }

        .sub-navbar a:hover {
            color: #228B22;
            transform: scale(1.05);
        }

        .sub-navbar a.active {
            color: #228B22;
            font-weight: bold;
        }


        .hero-section {
            display: flex;
            flex-direction: row;
            margin-top: 45px;
            background: linear-gradient(rgba(135, 206, 250, 0.4), rgba(255, 255, 255, 0.4)),
                url('herobg.png') no-repeat center center;
            background-size: cover;
            width: 100%;
            padding: 2rem 0;
            flex: 1;
        }

        .hero-left,
        .hero-right {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
        }

        .hero-content {
            text-align: center;
            max-width: 500px;
            color: #333;
            animation: slideInLeft 1s ease-out;
        }

        .hero-content h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .hero-content p {
            font-size: 1.2rem;
            margin-bottom: 2rem;
        }

        .appointment-box {
            background-color: #ffffff;
            color: #006400;
            padding: 1rem 2rem;
            font-weight: bold;
            border-radius: 8px;
            border: 2px solid #006400;
            transition: 0.3s ease;
        }

        .appointment-box:hover {
            background-color: #006400;
            color: #ffffff;
        }

        .hero-right img {
            max-width: 90%;
            height: auto;
            object-fit: contain;
            animation: slideInRight 1s ease-out;
        }

        @keyframes slideInLeft {
            from {
                opacity: 0;
                transform: translateX(-50px);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(50px);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        footer {
            background-color: #f2f2f2;
            color: #333;
            padding: 2rem 1rem;
            font-family: 'Poppins', sans-serif;
            margin-top: auto;
        }

        footer .footer-content {
            max-width: 1200px;
            margin: auto;
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            gap: 2rem;
        }

        footer h3 {
            color: #006400;
            margin-bottom: 1rem;
        }

        footer ul {
            list-style: none;
            padding-left: 0;
        }

        footer a {
            color: #333;
        }

        footer a:hover {
            color: #006400;
        }

        .footer-bottom {
            text-align: center;
            margin-top: 2rem;
            font-size: 0.9rem;
            color: #777;
        }

        @media (max-width: 768px) {
            .top-navbar {
                flex-direction: column;
                align-items: stretch;
                padding: 1rem;
            }

            .top-navbar .logo {
                font-size: 1.5rem;
                margin-bottom: 0.5rem;
            }


            .auth-links,
            #user-section {
                width: 100%;
                justify-content: center;
                text-align: center;
            }

            .auth-links a,
            #user-section a,
            #user-section button {
                margin: 0.3rem 0.4rem;
            }

            .sub-navbar {
                flex-direction: column;
                align-items: center;
                padding: 1rem 0.5rem;
                top: 168px;
            }

            .sub-navbar a {
                margin: 0.4rem 0;
                font-size: 1rem;
            }

            .hero-section {
                flex-direction: column;
                margin-top: 170px;
            }

            .hero-left,
            .hero-right {
                width: 100%;
                padding: 3rem 2rem;
                text-align: center;
            }

            .hero-content h1 {
                font-size: 2rem;
            }

            .hero-content p {
                font-size: 1rem;
            }

            .hero-right img {
                max-width: 80%;
            }

            .footer-content {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>

<body>

    <!-- Top Navbar -->
    <nav class="top-navbar">
        <a href="index.html" class="logo"><span>Medi</span><span>Plus</span></a>
        <div class="auth-links" id="auth-links">
            <a href="login.html"><i class="fas fa-sign-in-alt"></i></a>
            <a href="registration.html"><i class="fas fa-user-plus"></i></a>
        </div>
        <div id="user-section" style="text-align: right; padding: 10px 20px;"></div>
    </nav>

    <!-- Sub Navbar -->
    <nav class="sub-navbar">
        <a href="doctor_search.html">Our Doctors</a>
        <a href="faculties.html">Departments</a>
        <a href="faq.html">Disease Prediction</a>
    </nav>

    <!-- Hero Section -->
    <section class="hero-section">
        <div class="hero-left">
            <div class="hero-content">
                <h1>Your Health, Our Priority</h1>
                <p>Delivering quality care with compassion and excellence.</p>
                <a href="appointment.html" class="appointment-box">Book an Appointment</a>
            </div>
        </div>
        <div class="hero-right">
            <img src="heroimg.png" alt="Doctors" />
        </div>
    </section>

    <!-- Footer -->
    <footer>
        <div class="footer-content">
            <div>
                <h3>About MediPlus</h3>
                <p>MediPlus is a web-based platform facilitating seamless management of healthcare services, including
                    appointments, patient records, and doctor interactions.</p>
            </div>
            <div>
                <h3>Quick Links</h3>
                <ul>
                    <li><a href="index.html">Home</a></li>
                    <li><a href="doctor_search.html">Search Doctors</a></li>
                    <li><a href="faq.html">Disease Prediction</a></li>
                    <li><a href="appointment.html">Book Appointment</a></li>
                </ul>
            </div>
            <div>
                <h3>Contact Us</h3>
                <p>Email: support@mediplus.com</p>
                <p>Phone: +91-12345-67890</p>
                <p>Address: 123, Health Street, Kolkata</p>
            </div>
            <div>
                <h3>Follow Us</h3>
                <div style="font-size: 1.5rem;">
                    <a href="#"><i class="fab fa-facebook"></i></a>
                    <a href="#"><i class="fab fa-twitter"></i></a>
                    <a href="#"><i class="fab fa-instagram"></i></a>
                    <a href="#"><i class="fab fa-linkedin"></i></a>
                </div>
            </div>
        </div>
        <div class="footer-bottom">
            &copy; 2025 MediPlus. All rights reserved.
            <p>Designed with ❤️ for better healthcare accessibility.</p>
        </div>
    </footer>

    <!-- JS for User Section -->
    <script>
        const userSection = document.getElementById("user-section");
        const storedUser = sessionStorage.getItem("loggedInUser");

        if (storedUser && storedUser !== "null") {
            try {
                const userObj = JSON.parse(storedUser);
                const username = userObj.username || userObj.name || "User";
                userSection.innerHTML = `
                    <span style="font-weight: bold; font-size: 18px;">Welcome, ${username}!</span>
                    <button onclick="logout()" style="margin-left: 10px; padding: 6px 12px; border: none; background-color: #e74c3c; color: white; border-radius: 4px; cursor: pointer;">Logout</button>
                `;
            } catch (error) {
                console.error("Invalid session user:", error);
                sessionStorage.removeItem("loggedInUser");
                sessionStorage.removeItem("token");
                location.reload();
            }
        } else {
            userSection.innerHTML = `
                <a href="login.html" style="margin-right: 10px; padding: 6px 12px; background-color: #4CAF50; color: white; border-radius: 4px; text-decoration: none;">Login</a>
                <a href="registration.html" style="padding: 6px 12px; background-color: #007BFF; color: white; border-radius: 4px; text-decoration: none;">Register</a>
            `;
        }

        function logout() {
            sessionStorage.removeItem("loggedInUser");
            sessionStorage.removeItem("token");
            location.reload();
        }
    </script>

</body>

</html>
-=======================================================================================================================================================
//Backend server.js

import 'dotenv/config';
import express from 'express';
import OpenAI from 'openai';
import cors from 'cors';
import 'dotenv/config';
import mongoose from 'mongoose';
import dayjs from 'dayjs';
import bcrypt from 'bcrypt';
import customParseFormat from 'dayjs/plugin/customParseFormat.js';
import session from 'express-session';
import validator from 'validator';
import helmet from 'helmet';
import jwt from 'jsonwebtoken';


// Mongoose Models
import User from './models/User.js';
import Doctor from './models/Doctor.js';
import Appointment from './models/Appointment.js';

const app = express();
const port = process.env.PORT || 3000;

const allowedOrigins = ['http://127.0.0.1:5500', 'http://localhost:5500'];

const corsOptions = {
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.log('Blocked CORS origin:', origin);
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true
};

app.use(cors(corsOptions));

app.use(express.json());
app.use(helmet());
app.use(session({
  secret: process.env.SESSION_SECRET || 'mysecret',
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: process.env.NODE_ENV === "production", 
    httpOnly: true,
    sameSite: 'lax', 
    maxAge: 24 * 60 * 60 * 1000 // 1 day
  }
}));

// Add this after your session middleware
app.use((req, res, next) => {
  console.log('Session:', req.session); // Debug logging
  next();
});

// OpenAI Configuration
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// MongoDB Connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/mediplus', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
mongoose.connection.once('open', () => {
  console.log('✅ Connected to MongoDB');
});


// Existing GPT Prediction Endpoint
app.post('/predict', async (req, res) => {
  const symptomsText = req.body.symptoms;

  if (!symptomsText || symptomsText.trim() === '') {
    return res.status(400).json({ error: 'Please enter some symptoms.' });
  }

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "user",
          content: `Given the symptoms: "${symptomsText}", what is the most likely disease? 
          Provide a short explanation. And give remedies if applicable.
          Return the result in the following format:
          Possible Diseases: ...
          Explanation: ...
          Precautions: ...
          Remedies: ...`,
        },
      ],
    });

    const prediction = completion.choices[0].message.content;
    res.json({ prediction });
  } catch (error) {
    console.error('Error during OpenAI API call:', error);
    res.status(500).json({ error: 'Error during prediction.', details: error.message });
  }
});

// User Registration Endpoint
app.post('/api/register', async (req, res) => {
    try {
        const { name, email, password } = req.body;
        if (!name || !email || !password) {
          return res.status(400).json({ error: 'All fields are required.' });
        }
        if (!validator.isEmail(email)) {
          return res.status(400).json({ error: 'Invalid email format.' });
        }
        if (!validator.isStrongPassword(password, 
          { 
          minLength: 6,
          minLowercase: 0,
          minUppercase: 0,
          minNumbers: 0,
          minSymbols: 0 
          })) {
          return res.status(400).json({ error: 'Password must be at least 6 characters and strong.' });
        }

        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(409).json({ error: 'User already exists' });
        }
        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({ name, email, password: hashedPassword });
        await newUser.save();
        req.session.userId = newUser._id;
        req.session.save();
        res.status(201).json({ message: 'User registered successfully' , userId: newUser._id });
      } catch (error) {
        console.error('Registration error:', error);
        res.status(500).json({ error: 'Server error during registration' });
    }
});

// User Login Endpoint
app.post('/api/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        if (!email || !password) {
          return res.status(400).json({ error: 'Email and password required.' });
        }

        if (!validator.isEmail(email)) {
          return res.status(400).json({ error: 'Invalid email format.' });
        }

        const user = await User.findOne({ email });

        if (!user) return res.status(401).json({ error: 'Invalid email or password' });
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
          return res.status(401).json({ error: 'Invalid email or password' });
        }
        req.session.userId = user._id;
        req.session.save();
        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
        res.json({
          message: 'Login successful',
          userId: user._id,
          email: user.email,
          username: user.name,
          token: token
        });

    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({ error: 'Server error during login' });
    }
});



//Get all doctors Endpoint
app.get('/api/doctors', async (req, res) => {
    try {
        const doctors = await Doctor.find({});
        res.json(doctors);
    } catch (error) {
        console.error('Error fetching doctors:', error);
        res.status(500).json({ error: 'Failed to fetch doctors' });
    }
});


app.post('/api/appointments', async (req, res) => {
    const { doctorId, date, time, symptoms } = req.body;
    const userId = req.session.userId; // Use user ID from session or JWT
    if (!userId) {
      return res.status(401).json({ error: 'Please login first' });
    }

    if (!doctorId || !date || !time || !symptoms) {
      return res.status(400).json({ error: 'All fields are required.' });
    }
    if (!validator.isMongoId(doctorId)) {
      return res.status(400).json({ error: 'Invalid doctor ID.' });
    }
    if (!validator.isISO8601(date)) {
      return res.status(400).json({ error: 'Invalid date format (use YYYY-MM-DD).' });
    }
    if (!validator.matches(time, /^([01]\d|2[0-3]):([0-5]\d)$/)) {
    return res.status(400).json({ error: 'Invalid time format (HH:mm).' });
    }
    if (!validator.isLength(symptoms, { min: 3 })) {
      return res.status(400).json({ error: 'Symptoms must be at least 3 characters.' });
    }
    if (!userId) return res.status(401).json({ error: 'Please login first' });

    try {
        const appointmentDate = new Date(date);
        const now = new Date();

        // Check if date is in the future
        if (appointmentDate < now) {
            return res.status(400).json({ error: 'Appointment date must be in the future' });
        }

        // Check if date is within 6 months from today
        const sixMonthsLater = new Date();
        sixMonthsLater.setMonth(sixMonthsLater.getMonth() + 6);
        if (appointmentDate > sixMonthsLater) {
            return res.status(400).json({ error: 'Appointment date must be within 6 months from today' });
        }

        // Validate: time is within working hours (09:00 to 18:00)
        const [hour, minute] = time.split(':').map(Number);
        const totalMinutes = hour * 60 + minute;
        if (totalMinutes < 540 || totalMinutes > 1080) {
            return res.status(400).json({ error: 'Appointments must be booked between 09:00 and 18:00' });
        }

        const doctor = await Doctor.findById(doctorId);
        if (!doctor) {
            return res.status(404).json({ error: 'Doctor not found' });
        }

        // Get the weekday (e.g., "Monday")
        const weekday = appointmentDate.toLocaleString('en-US', { weekday: 'long' });

        // Check availability object
        if (!doctor.availability || !doctor.availability[weekday] || !doctor.availability[weekday].includes(time)) {
            return res.status(400).json({ error: 'Doctor not available at this time.' });
        }

        // Check for conflicts
        const conflict = await Appointment.findOne({ doctorId, date, time });
        if (conflict) {
            return res.status(409).json({ error: 'Time slot already booked for this doctor.' });
        }

        const sanitizedSymptoms = validator.escape(symptoms.trim());

        const newAppointment = new Appointment({
            userId,
            doctorId,
            date,
            time,
            notes: sanitizedSymptoms
        });

        await newAppointment.save();
        res.status(201).json({ message: 'Appointment booked successfully' });

    } catch (error) {
        console.error('Error booking appointment:', error);
        res.status(500).json({ error: 'Server error while booking' });
    }
});

// UPDATE APPOINTMENT ENDPOINT 
app.put('/api/appointments/:id', async (req, res) => {
  const { doctorId, date, time, symptoms } = req.body;
  const userId = req.session.userId;
  const appointmentId = req.params.id;
  
  if (!userId) {
      return res.status(401).json({ error: 'Please login first' });
  }

  // Input validation
  if (!doctorId || !date || !time || !symptoms) {
      return res.status(400).json({ error: 'All fields are required.' });
  }
  if (!validator.isMongoId(doctorId)) {
      return res.status(400).json({ error: 'Invalid doctor ID.' });
  }
  if (!validator.isISO8601(date)) {
      return res.status(400).json({ error: 'Invalid date format (use YYYY-MM-DD).' });
  }
  if (!validator.matches(time, /^([01]\d|2[0-3]):([0-5]\d)$/)) {
      return res.status(400).json({ error: 'Invalid time format (HH:mm).' });
  }
  if (!validator.isLength(symptoms, { min: 3 })) {
      return res.status(400).json({ error: 'Symptoms must be at least 3 characters.' });
  }

  try {
      // Validate the appointment belongs to the user
      const existingAppointment = await Appointment.findOne({ 
          _id: appointmentId, 
          userId: userId 
      });
      
      if (!existingAppointment) {
          return res.status(404).json({ error: 'Appointment not found' });
      }

      // Same validation as create appointment
      const appointmentDate = new Date(date);
      const now = new Date();
      
      if (appointmentDate < now) {
          return res.status(400).json({ error: 'Appointment date must be in the future' });
      }

      // Check if date is within 6 months from today
      const sixMonthsLater = new Date();
      sixMonthsLater.setMonth(sixMonthsLater.getMonth() + 6);
      if (appointmentDate > sixMonthsLater) {
          return res.status(400).json({ error: 'Appointment date must be within 6 months from today' });
      }

      // Validate: time is within working hours (09:00 to 18:00)
      const [hour, minute] = time.split(':').map(Number);
      const totalMinutes = hour * 60 + minute;
      if (totalMinutes < 540 || totalMinutes > 1080) {
          return res.status(400).json({ error: 'Appointments must be booked between 09:00 and 18:00' });
      }

      const doctor = await Doctor.findById(doctorId);
      if (!doctor) {
          return res.status(404).json({ error: 'Doctor not found' });
      }

      // Get the weekday (e.g., "Monday")
      const weekday = appointmentDate.toLocaleString('en-US', { weekday: 'long' });

      // Check availability object
      if (!doctor.availability || !doctor.availability[weekday] || !doctor.availability[weekday].includes(time)) {
          return res.status(400).json({ error: 'Doctor not available at this time.' });
      }

      // Check for conflicts (excluding current appointment)
      const conflict = await Appointment.findOne({ 
          doctorId, 
          date, 
          time,
          _id: { $ne: appointmentId }
      });
      
      if (conflict) {
          return res.status(409).json({ error: 'Time slot already booked for this doctor.' });
      }

      const updatedAppointment = await Appointment.findByIdAndUpdate(
          appointmentId,
          {
              doctorId,
              date,
              time,
              notes: validator.escape(symptoms.trim())
          },
          { new: true }
      );

      res.json({ message: 'Appointment updated successfully', appointment: updatedAppointment });
  } catch (error) {
      console.error('Error updating appointment:', error);
      res.status(500).json({ error: 'Server error while updating appointment' });
  }
});

// DELETE APPOINTMENT ENDPOINT  
app.delete('/api/appointments/:id', async (req, res) => {
  const userId = req.session.userId;
  const appointmentId = req.params.id;
  
  if (!userId) {
      return res.status(401).json({ error: 'Please login first' });
  }

  try {
      const deletedAppointment = await Appointment.findOneAndDelete({ 
          _id: appointmentId, 
          userId: userId 
      });
      
      if (!deletedAppointment) {
          return res.status(404).json({ error: 'Appointment not found' });
      }

      res.json({ message: 'Appointment cancelled successfully' });
  } catch (error) {
      console.error('Error deleting appointment:', error);
      res.status(500).json({ error: 'Server error while cancelling appointment' });
  }
});

app.get("/api/check-auth", async (req, res) => {
if (req.session.userId) {
  const user = await User.findById(req.session.userId);
  res.json({ user: { name: user.name } });
} else {
  res.json({ user: null });
}
});


app.get("/api/check-auth", async (req, res) => {
  if (req.session.userId) {
    const user = await User.findById(req.session.userId);
    res.json({ user: { name: user.name } });
  } else {
    res.json({ user: null });
  }
});


// Get Appointments for a User Endpoint
app.get('/api/appointments/:userId', async (req, res) => {
    try {
        const appointments = await Appointment.find({ userId: req.params.userId })
            .populate('doctorId', 'name department availability');
        res.json(appointments);
    } catch (error) {
        console.error('Error fetching appointments:', error);
        res.status(500).json({ error: 'Failed to fetch user appointments' });
    }
});

app.post("/api/logout", (req, res) => {
  req.session.destroy();
  res.clearCookie("connect.sid"); // Clear session cookie
  res.json({ message: "Logged out" });
});


const doctorData = [
  {
    name: "Dr. Aryan Roy",
    img: "https://randomuser.me/api/portraits/men/31.jpg",
    department: "Cardiology",
    qualification: "MBBS, MD (Cardiology)",
    experience: "12+ Years",
    clinic: "Fortis Heart Care",
    languages: "English, Hindi, Bengali",
    email: "aryan.roy@mediplus.in",
    fee: "₹800",
    rating: "★★★★☆ (4.5/5)",
    availability: {
      Monday: ["10:00", "11:00", "12:00", "13:00"],
      Tuesday: ["10:00", "11:00", "12:00", "13:00"],
      Wednesday: ["10:00", "11:00", "12:00", "13:00"],
      Thursday: ["10:00", "11:00", "12:00", "13:00"],
      Friday: ["10:00", "11:00", "12:00", "13:00"]
    }
  },
  {
    name: "Dr. Meera Das",
    img: "https://randomuser.me/api/portraits/women/45.jpg",
    department: "Neurology",
    qualification: "MBBS, DM (Neurology)",
    experience: "9+ Years",
    clinic: "BrainWave Neuro Clinic",
    languages: "English, Hindi, Odia",
    email: "meera.das@mediplus.in",
    fee: "₹950",
    rating: "★★★★☆ (4.6/5)",
    availability: {
      Tuesday: ["11:00", "12:00", "13:00", "14:00"],
      Wednesday: ["11:00", "12:00", "13:00", "14:00"],
      Thursday: ["11:00", "12:00", "13:00", "14:00"],
      Friday: ["11:00", "12:00", "13:00", "14:00"],
      Saturday: ["11:00", "12:00", "13:00", "14:00"]
    }
  },
  {
    name: "Dr. Raghav Singh",
    img: "https://randomuser.me/api/portraits/men/44.jpg",
    department: "Orthopedics",
    qualification: "MBBS, MS (Ortho)",
    experience: "10+ Years",
    clinic: "OrthoPlus Bone Care",
    languages: "English, Hindi, Punjabi",
    email: "raghav.singh@mediplus.in",
    fee: "₹700",
    rating: "★★★★☆ (4.3/5)",
    availability: {
      Monday: ["14:00", "15:00", "16:00", "17:00"],
      Tuesday: ["14:00", "15:00", "16:00", "17:00"],
      Wednesday: ["14:00", "15:00", "16:00", "17:00"],
      Thursday: ["14:00", "15:00", "16:00", "17:00"],
      Friday: ["14:00", "15:00", "16:00", "17:00"]
    }
  },
  {
    name: "Dr. Ananya Sharma",
    img: "https://randomuser.me/api/portraits/women/68.jpg",
    department: "Pediatrics",
    qualification: "MBBS, DCH",
    experience: "8+ Years",
    clinic: "Happy Kids Health",
    languages: "English, Hindi, Marathi",
    email: "ananya.sharma@mediplus.in",
    fee: "₹600",
    rating: "★★★★☆ (4.7/5)",
    availability: {
      Wednesday: ["09:00", "10:00", "11:00", "12:00"],
      Thursday: ["09:00", "10:00", "11:00", "12:00"],
      Friday: ["09:00", "10:00", "11:00", "12:00"],
      Saturday: ["09:00", "10:00", "11:00", "12:00"],
      Sunday: ["09:00", "10:00", "11:00", "12:00"]
    }
  },
  {
    name: "Dr. Suman Ghosh",
    img: "https://randomuser.me/api/portraits/women/53.jpg",
    department: "Dermatology",
    qualification: "MBBS, MD (Skin & VD)",
    experience: "11+ Years",
    clinic: "DermaGlow Skin Center",
    languages: "English, Hindi, Bengali",
    email: "suman.ghosh@mediplus.in",
    fee: "₹750",
    rating: "★★★★☆ (4.4/5)",
    availability: {
      Monday: ["15:00", "16:00", "17:00", "18:00"],
      Tuesday: ["15:00", "16:00", "17:00", "18:00"],
      Wednesday: ["15:00", "16:00", "17:00", "18:00"],
      Thursday: ["15:00", "16:00", "17:00", "18:00"]
    }
  }
];

// RUN ONCE TO SEED DOCTORS
const seedDoctors = async () => {
  const existing = await Doctor.findOne();
  if (existing) return console.log("❗Doctors already seeded. Skipping...");

  await Doctor.deleteMany();
  await Doctor.insertMany(doctorData);
  console.log("✅ Doctors seeded successfully.");
};
seedDoctors();



// Start Server
app.listen(port, () => {
  console.log(`🚀 Server running at http://localhost:${port}`);
});































<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Doctor Appointment Scheduler</title>
    <!-- Poppins font and Font Awesome -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto&family=Poppins:wght@600&display=swap"
        rel="stylesheet" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .top-navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem 2rem;
            border-bottom: 1px solid #ccc;
            z-index: 1000;
            backdrop-filter: blur(6px);
        }

        .top-navbar .logo {
            font-size: 1.8rem;
            font-weight: 700;
            font-family: 'Poppins', sans-serif;
        }

        .top-navbar .logo span:first-child {
            color: #222;
        }

        .top-navbar .logo span:last-child {
            color: #008000;
        }

        .auth-links {
            display: flex;
            align-items: center;
        }

        .auth-links a {
            margin-left: 1rem;
            color: #006400;
            font-size: 1.5rem;
            transition: 0.3s;
        }

        .auth-links a:hover {
            color: #004d00;
        }

        html,
        body {
            font-family: 'Poppins', sans-serif;
            scroll-behavior: smooth;
            min-height: 100%;
        }

        body {
            display: flex;
            padding-top: 70px;
            flex-direction: column;
            background: #f4f7fa;
            justify-content: center;
            align-items: center;
            color: #333;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        .container {
            width: 100%;
            max-width: 800px;
            background-color: #fff;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            padding: 20px;
            overflow: hidden;
            margin: 20px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #2c3e50;
            font-size: 32px;
            font-weight: 600;
        }

        .form-container {
            background-color: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        label {
            font-weight: bold;
            margin-bottom: 8px;
            display: block;
        }

        input,
        select,
        button,
        textarea {
            width: 100%;
            padding: 12px 14px;
            margin-bottom: 15px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 16px;
            font-family: 'Roboto', sans-serif;
        }

        textarea {
            resize: vertical;
            min-height: 80px;
        }

        input::placeholder,
        select::placeholder,
        textarea::placeholder {
            color: #999;
            font-size: 15px;
            opacity: 1;
        }

        button {
            background-color: #3498db;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        button:hover {
            background-color: #2980b9;
        }

        .appointment-list {
            margin-top: 20px;
        }

        .appointment-card {
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease-in;
        }


        #doctorAvailability {
            background: linear-gradient(135deg, #e8f5e8 0%, #f0f8f0 100%);
            border: 1px solid #c8e6c9;
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0 15px 0;
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.1);
            font-size: 14px;
            transition: all 0.3s ease;
            opacity: 0;
            transform: translateY(-10px);
        }

        #doctorAvailability.show {
            opacity: 1;
            transform: translateY(0);
        }

        #doctorAvailability strong {
            color: #2e7d32;
            font-size: 15px;
            display: inline-flex;
            align-items: center;
            margin-bottom: 8px;
        }

        #doctorAvailability strong::before {
            content: "📅";
            margin-right: 6px;
            font-size: 16px;
        }

        .availability-schedule {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 8px;
            margin-top: 10px;
        }

        .day-schedule {
            background: white;
            padding: 8px 12px;
            border-radius: 6px;
            border-left: 3px solid #4caf50;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .day-name {
            font-weight: 600;
            color: #1b5e20;
            font-size: 13px;
            margin-bottom: 4px;
        }

        .time-slots {
            color: #424242;
            font-size: 12px;
            line-height: 1.4;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .appointment-card .appointment-info {
            margin-bottom: 10px;
        }

        .appointment-card .appointment-info strong {
            color: #2c3e50;
        }

        .appointment-card .appointment-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .appointment-card button {
            flex: 1;
            padding: 8px 12px;
            font-size: 14px;
            border-radius: 5px;
        }

        .edit-btn {
            background-color: #f39c12 !important;
        }

        .edit-btn:hover {
            background-color: #e67e22 !important;
        }

        .delete-btn {
            background-color: #e74c3c !important;
        }

        .delete-btn:hover {
            background-color: #c0392b !important;
        }

        .add-btn {
            margin-bottom: 20px;
            background-color: #2ecc71;
        }

        .add-btn:hover {
            background-color: #27ae60;
        }

        .message {
            text-align: center;
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 8px;
            font-weight: bold;
        }

        .message.success {
            background-color: #2ecc71;
            color: white;
        }

        .message.error {
            background-color: #e74c3c;
            color: white;
        }

        .no-appointments {
            text-align: center;
            color: #7f8c8d;
            font-style: italic;
            padding: 20px;
        }

        @media screen and (max-width: 600px) {
            .container {
                padding: 15px;
            }

            input,
            select,
            button,
            textarea {
                padding: 10px;
                font-size: 14px;
            }

            .appointment-card .appointment-actions {
                flex-direction: column;
            }
        }

        footer {
            width: 100%;
            background-color: #2c3e50;
            color: white;
            text-align: center;
            padding: 20px;
            font-size: 14px;
        }
    </style>
</head>

<body>

    <nav class="top-navbar">
        <a href="index.html" class="logo"><span>Medi</span><span>Plus</span></a>
        <div class="auth-links">
            <a href="index.html" title="Exit to Home"><i class="fas fa-sign-out-alt"></i></a>
        </div>
    </nav>

    <div class="container">
        <h1>Doctor Appointment Scheduler</h1>

        <div id="messageBox"></div>

        <div class="form-container" id="formContainer">
            <form id="appointmentForm">
                <label for="doctor">Select Doctor:</label>
                <select id="doctor" name="doctor" required></select>
                <div id="doctorAvailability"></div>

                <label for="date">Select Date:</label>
                <input type="date" id="date" name="date" required>

                <label for="time">Available Time Slots:</label>
                <select id="time" name="time" required></select>

                <label for="symptoms">Symptoms:</label>
                <textarea id="symptoms" name="symptoms" rows="4" placeholder="Describe your symptoms..."
                    required></textarea>

                <button type="submit">Book Appointment</button>
            </form>
        </div>

        <div class="appointment-list">
            <h3>Your Appointments</h3>
            <div style="margin-bottom: 15px;">
                <label for="filterDate">Filter by Date:</label>
                <input type="date" id="filterDate" placeholder="Select date to filter appointments" />
            </div>
            <div id="appointmentList"></div>
        </div>
    </div>

    <footer>
        <p>© 2025 MediPlus. All rights reserved.</p>
        <p>Designed with ❤️ for better healthcare accessibility.</p>
        <p>Contact: info@yourclinic.com | Phone: +91-1234567890</p>
        <p>Address: 1234 Placeholder Street, City, Country</p>
    </footer>

    <script>
        let appointments = [];
        let currentUserId = null;
        let doctors = [];

        // // Check authentication on page load
        // async function checkAuth() {
        //     try {
        //         const res = await fetch('http://localhost:3000/api/check-auth', {
        //             credentials: 'include'
        //         });

        //         if (!res.ok) throw new Error('Auth check failed');

        //         const data = await res.json();
        //         if (!data.user) {
        //             alert('Please login to continue.');
        //             window.location.href = 'login.html';
        //         } else {
        //             // Get user ID from session storage or set a mock one for testing
        //             const storedUserId = sessionStorage.getItem('userId');
        //             if (storedUserId) {
        //                 currentUserId = storedUserId;
        //             } else {
        //                 // For testing - you should get this from your login response
        //                 console.warn('No userId found in session storage. Using mock ID for testing.');
        //                 currentUserId = '507f1f77bcf86cd799439011'; // Mock ObjectId for testing
        //             }
        //         }
        //     } catch (error) {
        //         console.error('Auth error:', error);
        //         alert('Session expired. Please login again.');
        //         window.location.href = 'login.html';
        //     }
        // }


        // Set a mock user ID for testing (replace with actual user ID from login)
        function setMockUserId() {
            // Try to get from sessionStorage first
            currentUserId = sessionStorage.getItem('userId');

            // If not found, use a mock ID for testing
            if (!currentUserId) {
                currentUserId = '507f1f77bcf86cd799439011'; // Mock ObjectId
                console.warn('Using mock user ID for testing');
            }
        }

        async function fetchDoctors() {
            try {
                const res = await fetch('http://localhost:3000/api/doctors', {
                    credentials: 'include'
                });
                if (!res.ok) throw new Error('Failed to fetch doctors');

                doctors = await res.json();
                const doctorSelect = document.getElementById('doctor');
                doctorSelect.innerHTML = '<option value="" disabled selected>Select a Doctor</option>';

                doctors.forEach(doctor => {
                    const option = document.createElement('option');
                    option.value = doctor._id;
                    option.text = `${doctor.name} (${doctor.department})`;
                    option.dataset.availability = JSON.stringify(doctor.availability);
                    doctorSelect.appendChild(option);
                });

                doctorSelect.addEventListener('change', () => {
                    updateTimeSlots();
                    const selectedDoctor = doctorSelect.options[doctorSelect.selectedIndex];
                    if (selectedDoctor) {
                        const availability = JSON.parse(selectedDoctor.dataset.availability);
                        const availDisplay = Object.entries(availability)
                            .map(([day, slots]) => `
                                <div class="day-schedule">
                                    <div class="day-name">${day}</div>
                                        <div class="time-slots">${slots.length > 0 ? slots.join(', ') : 'Not Available'}</div>
                                </div>`)
                            .join('');

                        const doctorAvailabilityDiv = document.getElementById('doctorAvailability');
                        doctorAvailabilityDiv.innerHTML = `
                            <strong>Doctor Availability</strong>
                            <div class="availability-schedule">
                                ${availDisplay}
                            </div>
                        `;
                        // Add show class for animation
                        doctorAvailabilityDiv.classList.remove('show');
                        setTimeout(() => {
                            doctorAvailabilityDiv.classList.add('show');
                        }, 50);
                    }
                });

                document.getElementById('date').addEventListener('change', updateTimeSlots);
            } catch (error) {
                console.error('Error fetching doctors:', error);
                showMessage('Failed to load doctors. Please refresh.', false);
            }
        }

        function updateTimeSlots() {
            const doctorSelect = document.getElementById('doctor');
            const dateInput = document.getElementById('date');
            const timeSelect = document.getElementById('time');
            timeSelect.innerHTML = '';

            const selectedDoctor = doctorSelect.options[doctorSelect.selectedIndex];
            if (!selectedDoctor || !dateInput.value) return;

            const availability = JSON.parse(selectedDoctor.dataset.availability);
            const selectedDate = new Date(dateInput.value);
            const day = selectedDate.toLocaleString('en-US', { weekday: 'long' });

            const slots = availability[day] || [];

            if (slots.length === 0) {
                const opt = document.createElement('option');
                opt.text = 'No available slots';
                opt.disabled = true;
                timeSelect.appendChild(opt);
                return;
            }

            const now = new Date();
            const isToday = selectedDate.toDateString() === now.toDateString();

            slots.forEach(slot => {
                if (isToday) {
                    const [hour, minute] = slot.split(':');
                    const slotTime = new Date(selectedDate);
                    slotTime.setHours(parseInt(hour), parseInt(minute));

                    if (slotTime <= now) return; // Skip past time slots today
                }

                const opt = document.createElement('option');
                opt.value = slot;
                opt.text = slot;
                timeSelect.appendChild(opt);
            });

            if (timeSelect.options.length === 0) {
                const opt = document.createElement('option');
                opt.text = 'No available slots remaining';
                opt.disabled = true;
                timeSelect.appendChild(opt);
            }
        }

        async function fetchUserAppointments() {
            if (!currentUserId) return;

            try {
                const res = await fetch(`http://localhost:3000/api/appointments/${currentUserId}`, {
                    credentials: 'include'
                });

                if (!res.ok) throw new Error('Failed to fetch appointments');

                appointments = await res.json();
                displayAppointments();
            } catch (error) {
                console.error('Error fetching appointments:', error);
                showMessage('Failed to load appointments.', false);
            }
        }

        function displayAppointments(filteredAppointments = null) {
            const appointmentList = document.getElementById('appointmentList');
            const appointmentsToShow = filteredAppointments || appointments;

            if (appointmentsToShow.length === 0) {
                appointmentList.innerHTML = '<div class="no-appointments">No appointments found.</div>';
                return;
            }

            appointmentList.innerHTML = appointmentsToShow.map(appointment => {
                const doctor = appointment.doctorId;
                const appointmentDate = new Date(appointment.date).toLocaleDateString();

                return `
                    <div class="appointment-card" data-id="${appointment._id}">
                        <div class="appointment-info">
                            <strong>Doctor:</strong> ${doctor.name} (${doctor.department})<br>
                            <strong>Date:</strong> ${appointmentDate}<br>
                            <strong>Time:</strong> ${appointment.time}<br>
                            <strong>Symptoms:</strong> ${appointment.notes}<br>
                            <strong>Status:</strong> ${appointment.status || 'Scheduled'}
                        </div>
                        <div class="appointment-actions">
                            <button class="edit-btn" onclick="editAppointment('${appointment._id}')">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="delete-btn" onclick="deleteAppointment('${appointment._id}')">
                                <i class="fas fa-trash"></i> Cancel
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        async function deleteAppointment(appointmentId) {
            if (!confirm('Are you sure you want to cancel this appointment?')) return;

            try {
                const res = await fetch(`http://localhost:3000/api/appointments/${appointmentId}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });

                if (!res.ok) throw new Error('Failed to cancel appointment');

                showMessage('Appointment cancelled successfully', true);
                await fetchUserAppointments(); // Refresh the list
            } catch (error) {
                console.error('Error cancelling appointment:', error);
                showMessage('Failed to cancel appointment', false);
            }
        }

        function editAppointment(appointmentId) {
            const appointment = appointments.find(app => app._id === appointmentId);
            if (!appointment) return;

            // Pre-fill the form with existing data
            document.getElementById('doctor').value = appointment.doctorId._id;
            document.getElementById('date').value = appointment.date.split('T')[0];
            document.getElementById('symptoms').value = appointment.notes;

            // Trigger doctor change to update availability and time slots
            const doctorSelect = document.getElementById('doctor');
            doctorSelect.dispatchEvent(new Event('change'));

            setTimeout(() => {
                document.getElementById('time').value = appointment.time;
            }, 100);

            // Change button text to indicate editing
            const submitBtn = document.querySelector('#appointmentForm button[type="submit"]');
            submitBtn.textContent = 'Update Appointment';
            submitBtn.dataset.editingId = appointmentId;

            // Scroll to form
            document.getElementById('formContainer').scrollIntoView({ behavior: 'smooth' });
        }

        document.getElementById('appointmentForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const doctorId = document.getElementById('doctor').value;
            const date = document.getElementById('date').value;
            const time = document.getElementById('time').value;
            const symptoms = document.getElementById('symptoms').value;
            const submitBtn = e.target.querySelector('button[type="submit"]');
            const isEditing = submitBtn.dataset.editingId;

            try {
                const url = isEditing
                    ? `http://localhost:3000/api/appointments/${isEditing}`
                    : 'http://localhost:3000/api/appointments';

                const method = isEditing ? 'PUT' : 'POST';

                const res = await fetch(url, {
                    method: method,
                    credentials: 'include',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        doctorId,
                        date,
                        time,
                        symptoms
                    })
                });

                const contentType = res.headers.get('content-type');
                let data;
                if (contentType && contentType.includes('application/json')) {
                    data = await res.json();
                } else {
                    const text = await res.text();
                    throw new Error(text || 'Unknown error occurred');
                }

                if (!res.ok) {
                    showMessage(data.error || `Failed to ${isEditing ? 'update' : 'book'} appointment`, false);
                } else {
                    showMessage(data.message || `Appointment ${isEditing ? 'updated' : 'booked'} successfully`, true);
                    document.getElementById('appointmentForm').reset();
                    document.getElementById('time').innerHTML = '';
                    document.getElementById('doctorAvailability').innerHTML = '';

                    // Reset button text
                    submitBtn.textContent = 'Book Appointment';
                    delete submitBtn.dataset.editingId;

                    // Refresh appointments list
                    await fetchUserAppointments();
                }
            } catch (error) {
                console.error('Booking/Update error:', error);
                showMessage(error.message || 'Network error. Please try again.', false);

                // Redirect to login if unauthorized
                if (error.message.includes('login') || error.message.includes('Unauthorized')) {
                    window.location.href = 'login.html';
                }
            }
        });

        // Filter appointments by date
        document.getElementById('filterDate').addEventListener('change', (e) => {
            const filterDate = e.target.value;
            if (!filterDate) {
                displayAppointments();
                return;
            }

            const filtered = appointments.filter(appointment => {
                const appointmentDate = appointment.date.split('T')[0];
                return appointmentDate === filterDate;
            });

            displayAppointments(filtered);
        });

        function showMessage(msg, success = true) {
            const messageBox = document.getElementById("messageBox");
            const className = success ? 'success' : 'error';
            messageBox.innerHTML = `<div class="message ${className}">${msg}</div>`;
            setTimeout(() => messageBox.innerHTML = "", 5000);
        }

        function setDateRange() {
            const dateInput = document.getElementById("date");
            const filterDateInput = document.getElementById("filterDate");
            const today = new Date();
            today.setDate(today.getDate() + 1); // Only from tomorrow
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, '0');
            const dd = String(today.getDate()).padStart(2, '0');
            const minDate = `${yyyy}-${mm}-${dd}`;
            dateInput.min = minDate;

            const maxDate = new Date(today);
            maxDate.setMonth(maxDate.getMonth() + 6);
            const yyyy2 = maxDate.getFullYear();
            const mm2 = String(maxDate.getMonth() + 1).padStart(2, '0');
            const dd2 = String(maxDate.getDate()).padStart(2, '0');
            dateInput.max = `${yyyy2}-${mm2}-${dd2}`;

            // Set filter date to show all dates
            filterDateInput.min = '2024-01-01';
            filterDateInput.max = `${yyyy2}-${mm2}-${dd2}`;
        }

        // Initialize everything when page loads
        window.onload = async () => {
            //await checkAuth();
            setMockUserId();
            await fetchDoctors();
            setDateRange();
            await fetchUserAppointments();
        };
    </script>
</body>

</html>

















//appointment.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Doctor Appointment Scheduler</title>
    <!-- Poppins font and Font Awesome -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto&family=Poppins:wght@600&display=swap"
        rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <script>
        const username = sessionStorage.getItem("loggedInUser");
        if (!username || username === "null") {
            sessionStorage.setItem("redirectMessage", "Please login to continue.");
            window.location.href = "login.html";
        }
    </script>


    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .top-navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem 2rem;
            border-bottom: 1px solid #ccc;
            z-index: 1000;
            backdrop-filter: blur(6px);
        }

        .top-navbar .logo {
            font-size: 1.8rem;
            font-weight: 700;
            font-family: 'Poppins', sans-serif;
        }

        .top-navbar .logo span:first-child {
            color: #222;
        }

        .top-navbar .logo span:last-child {
            color: #008000;
        }

        .auth-links {
            display: flex;
            align-items: center;
        }

        .auth-links a {
            margin-left: 1rem;
            color: #006400;
            font-size: 1.5rem;
            transition: 0.3s;
        }

        .auth-links a:hover {
            color: #004d00;
        }

        html,
        body {
            font-family: 'Poppins', sans-serif;
            scroll-behavior: smooth;
            min-height: 100%;
        }

        body {
            display: flex;
            padding-top: 70px;
            flex-direction: column;
            background: #f4f7fa;
            justify-content: center;
            align-items: center;
            color: #333;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        .container {
            width: 100%;
            max-width: 800px;
            background-color: #fff;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            padding: 20px;
            overflow: hidden;
            margin: 20px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #2c3e50;
            font-size: 32px;
            font-weight: 600;
        }

        .form-container {
            background-color: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        label {
            font-weight: bold;
            margin-bottom: 8px;
            display: block;
        }

        input,
        select,
        button {
            width: 100%;
            padding: 12px 14px;
            margin-bottom: 15px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 16px;
            font-family: 'Roboto', sans-serif;
        }

        input::placeholder,
        select::placeholder,
        textarea::placeholder {
            color: #999;
            font-size: 15px;
            opacity: 1;
        }

        button {
            background-color: #3498db;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        button:hover {
            background-color: #2980b9;
        }

        .appointment-list {
            margin-top: 20px;
        }

        .appointment-card {
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .appointment-card span {
            display: block;
            font-size: 14px;
            margin-bottom: 8px;
        }

        .appointment-card button {
            background-color: #e74c3c;
            border: none;
            padding: 8px;
            font-size: 14px;
            color: white;
            cursor: pointer;
            margin-right: 10px;
        }

        .appointment-card button:hover {
            background-color: #c0392b;
        }

        .edit-btn {
            background-color: #f39c12;
        }

        .edit-btn:hover {
            background-color: #e67e22;
        }

        .add-btn {
            margin-bottom: 20px;
            background-color: #2ecc71;
        }

        .add-btn:hover {
            background-color: #27ae60;
        }

        .message {
            text-align: center;
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 8px;
            font-weight: bold;
        }

        .message.success {
            background-color: #2ecc71;
            color: white;
        }

        .return-btn {
            background-color: #7f8c8d;
            margin-bottom: 20px;
            padding: 10px 20px;
            border: none;
            color: white;
            font-size: 15px;
            border-radius: 6px;
            cursor: pointer;
        }

        .return-btn:hover {
            background-color: #636e72;
        }

        @media screen and (max-width: 600px) {
            .container {
                padding: 15px;
            }

            input,
            select,
            button {
                padding: 10px;
                font-size: 14px;
            }
        }

        footer {
            width: 100%;
            background-color: #2c3e50;
            color: white;
            text-align: center;
            padding: 20px;
            font-size: 14px;
        }
    </style>
</head>

<body>

    <!-- Top Navbar -->
    <nav class="top-navbar">
        <a href="index.html" class="logo"><span>Medi</span><span>Plus</span></a>
        <div class="auth-links">
            <a href="index.html" title="Exit to Home"><i class="fas fa-sign-out-alt"></i></a>
        </div>
    </nav>

    <div class="container">
        <h1>Doctor Appointment Scheduler</h1>

        <div id="messageBox"></div>

        <button class="add-btn" id="addAppointmentBtn" style="display: none;">+ Add New Appointment</button>

        <div class="form-container" id="formContainer">
            <form id="appointmentForm">
                <input type="hidden" id="editingIndex" />

                <label for="name">Name:</label>
                <input type="text" id="name" required pattern="[A-Za-z\s]{3,}" title="Minimum 3 letters"
                    placeholder="Enter your full name" />

                <label for="email">Email:</label>
                <input type="email" id="email" required placeholder="Enter your email address" />

                <label for="phone">Phone:</label>
                <input type="tel" id="phone" required pattern="[0-9]{10}" title="10-digit phone number"
                    placeholder="Enter 10-digit mobile number" />

                <label for="date">Appointment Date:</label>
                <input type="date" id="date" required />

                <label for="time">Appointment Time (<em>24-hour format</em>):</label>
                <input type="time" id="time" required />

                <label for="doctor">Doctor:</label>
                <select id="doctor" required>
                    <option value="" disabled selected>Select a Doctor</option>
                    <option value="Dr. Aryan Roy">Dr. Aryan Roy, Cardiology</option>
                    <option value="Dr. Meera Das">Dr. Meera Das, Neurology</option>
                    <option value="Dr. Raghav Singh">Dr. Raghav Singh, Orthopedics</option>
                    <option value="Dr. Ananya Sharma">Dr. Ananya Sharma, Pediatrics</option>
                    <option value="Dr. Suman Ghosh">Dr. Suman Ghosh, Dermatology</option>
                </select>

                <button type="submit">Save Appointment</button>
            </form>
        </div>

        <div class="appointment-list">
            <h3>Search Appointments on a Selected Date:</h3>
            <input type="date" id="filterDate" />
            <div id="appointmentList"></div>
        </div>
    </div>

    <button class="return-btn" onclick="window.location.href='index.html'">← Back to Homepage</button>

    <footer>
        <p>© 2025 MediPlus. All rights reserved.</p>
        <p>Designed with ❤️ for better healthcare accessibility.</p>
        <p>Contact: info@yourclinic.com | Phone: +91-1234567890</p>
        <p>Address: 1234 Placeholder Street, City, Country</p>
    </footer>

    <script>
        if (localStorage.getItem("isLoggedIn") !== "true") {
            alert("You must be logged in to access this page.");
            window.location.href = "index.html"; // Redirect to homepage
        }
        let appointments = JSON.parse(localStorage.getItem("appointments")) || [];

        const form = document.getElementById("appointmentForm");
        const formContainer = document.getElementById("formContainer");
        const addAppointmentBtn = document.getElementById("addAppointmentBtn");
        const appointmentList = document.getElementById("appointmentList");
        const filterDateInput = document.getElementById("filterDate");
        const messageBox = document.getElementById("messageBox");

        function setDateRange() {
            const dateInput = document.getElementById("date");
            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, '0');
            const dd = String(today.getDate()).padStart(2, '0');
            const formattedToday = `${yyyy}-${mm}-${dd}`;
            dateInput.value = formattedToday;
            dateInput.min = formattedToday;

            const fourMonthsLater = new Date(today);
            fourMonthsLater.setMonth(fourMonthsLater.getMonth() + 4);
            const yyyy2 = fourMonthsLater.getFullYear();
            const mm2 = String(fourMonthsLater.getMonth() + 1).padStart(2, '0');
            const dd2 = String(fourMonthsLater.getDate()).padStart(2, '0');
            dateInput.max = `${yyyy2}-${mm2}-${dd2}`;
        }

        form.addEventListener("submit", function (e) {
            e.preventDefault();

            const phone = document.getElementById("phone").value.trim();
            const email = document.getElementById("email").value.trim();

            const phoneValid = /^[0-9]{10}$/.test(phone);
            const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

            if (!phoneValid) return showMessage("Please enter a valid 10-digit phone number.");
            if (!emailValid) return showMessage("Please enter a valid email address.");

            const appointment = {
                name: document.getElementById("name").value.trim(),
                email,
                phone,
                date: document.getElementById("date").value,
                time: document.getElementById("time").value,
                doctor: document.getElementById("doctor").value,
            };

            const editingIndex = document.getElementById("editingIndex").value;

            if (editingIndex !== "") {
                appointments[editingIndex] = appointment;
                showMessage("Appointment updated successfully!");
                document.getElementById("editingIndex").value = "";
            } else {
                appointments.push(appointment);
                showMessage("Appointment saved successfully!");
            }

            localStorage.setItem("appointments", JSON.stringify(appointments));
            form.reset();
            setDateRange();
            formContainer.style.display = "none";
            addAppointmentBtn.style.display = "block";
            displayAppointments();
        });

        filterDateInput.addEventListener("change", displayAppointments);

        addAppointmentBtn.addEventListener("click", function () {
            formContainer.style.display = "block";
            addAppointmentBtn.style.display = "none";
            form.reset();
            setDateRange();
            document.getElementById("editingIndex").value = "";
        });

        function displayAppointments() {
            const selectedDate = filterDateInput.value;
            appointmentList.innerHTML = "";

            const filtered = selectedDate
                ? appointments.filter((app) => app.date === selectedDate)
                : appointments;

            if (filtered.length === 0) {
                appointmentList.innerHTML = "<p>No appointments for this date.</p>";
                return;
            }

            filtered.forEach((app, index) => {
                const div = document.createElement("div");
                div.className = "appointment-card";
                div.innerHTML = `
                    <span><strong>Name:</strong> ${app.name}</span>
                    <span><strong>Email:</strong> ${app.email}</span>
                    <span><strong>Phone:</strong> ${app.phone}</span>
                    <span><strong>Date:</strong> ${app.date}</span>
                    <span><strong>Time:</strong> ${app.time}</span>
                    <span><strong>Doctor:</strong> ${app.doctor}</span>
                    <button class="edit-btn" onclick="editAppointment(${index})">Edit</button>
                    <button onclick="deleteAppointment(${index})">Delete</button>
                `;
                appointmentList.appendChild(div);
            });
        }

        function editAppointment(index) {
            const app = appointments[index];
            document.getElementById("name").value = app.name;
            document.getElementById("email").value = app.email;
            document.getElementById("phone").value = app.phone;
            document.getElementById("date").value = app.date;
            document.getElementById("time").value = app.time;
            document.getElementById("doctor").value = app.doctor;
            document.getElementById("editingIndex").value = index;

            formContainer.style.display = "block";
            addAppointmentBtn.style.display = "none";
        }

        function deleteAppointment(index) {
            if (confirm("Are you sure you want to delete this appointment?")) {
                appointments.splice(index, 1);
                localStorage.setItem("appointments", JSON.stringify(appointments));
                displayAppointments();
                showMessage("Appointment deleted successfully!");
            }
        }

        function showMessage(msg) {
            messageBox.innerHTML = `<div class="message success">${msg}</div>`;
            setTimeout(() => {
                messageBox.innerHTML = "";
            }, 3000);
        }

        window.onload = () => {
            setDateRange();
            displayAppointments();
        };
    </script>
</body>

</html>















index.html:


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MediPlus</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html,
        body {
            font-family: 'Poppins', sans-serif;
            scroll-behavior: smooth;
            min-height: 100%;
        }

        body {
            display: flex;
            flex-direction: column;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        .top-navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            flex-wrap: wrap;
            padding: 0.8rem 2rem;
            border-bottom: 1px solid #ccc;
            z-index: 1000;
            backdrop-filter: blur(6px);
            gap: 0.5rem;
        }

        .top-navbar .logo {
            font-size: 1.8rem;
            font-weight: 700;
        }

        .top-navbar .logo span:first-child {
            color: #222;
        }

        .top-navbar .logo span:last-child {
            color: #008000;
        }

        .auth-links {
            display: flex;
            align-items: center;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: flex-end;
            gap: 0.6rem;
        }

        .auth-links a {
            margin-left: 1.2rem;
            color: #006400;
            font-weight: 500;
            transition: 0.3s;
        }

        .auth-links a:hover {
            color: #004d00;
        }

        #user-section {
            margin-top: 0.5rem;
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .sub-navbar {
            position: sticky;
            top: 82px;
            /* Approx height of top-navbar + border */
            left: 0;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.6);
            color: #006400;
            backdrop-filter: blur(8px);
            display: flex;
            justify-content: center;
            padding: 0.6rem 0;
            border-bottom: 1px solid #ccc;
            z-index: 999;
        }

        .sub-navbar a {
            margin: 0 2rem;
            font-weight: 600;
            color: #006400;
            text-decoration: none;
            transition: color 0.3s ease, transform 0.2s ease;
        }

        .sub-navbar a:hover {
            color: #228B22;
            transform: scale(1.05);
        }

        .sub-navbar a.active {
            color: #228B22;
            font-weight: bold;
        }


        .hero-section {
            display: flex;
            flex-direction: row;
            margin-top: 45px;
            background: linear-gradient(rgba(135, 206, 250, 0.4), rgba(255, 255, 255, 0.4)),
                url('herobg.png') no-repeat center center;
            background-size: cover;
            width: 100%;
            padding: 2rem 0;
            flex: 1;
        }

        .hero-left,
        .hero-right {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
        }

        .hero-content {
            text-align: center;
            max-width: 500px;
            color: #333;
            animation: slideInLeft 1s ease-out;
        }

        .hero-content h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .hero-content p {
            font-size: 1.2rem;
            margin-bottom: 2rem;
        }

        .appointment-box {
            background-color: #ffffff;
            color: #006400;
            padding: 1rem 2rem;
            font-weight: bold;
            border-radius: 8px;
            border: 2px solid #006400;
            transition: 0.3s ease;
        }

        .appointment-box:hover {
            background-color: #006400;
            color: #ffffff;
        }

        .hero-right img {
            max-width: 90%;
            height: auto;
            object-fit: contain;
            animation: slideInRight 1s ease-out;
        }

        @keyframes slideInLeft {
            from {
                opacity: 0;
                transform: translateX(-50px);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(50px);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        footer {
            background-color: #f2f2f2;
            color: #333;
            padding: 2rem 1rem;
            font-family: 'Poppins', sans-serif;
            margin-top: auto;
        }

        footer .footer-content {
            max-width: 1200px;
            margin: auto;
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            gap: 2rem;
        }

        footer h3 {
            color: #006400;
            margin-bottom: 1rem;
        }

        footer ul {
            list-style: none;
            padding-left: 0;
        }

        footer a {
            color: #333;
        }

        footer a:hover {
            color: #006400;
        }

        .footer-bottom {
            text-align: center;
            margin-top: 2rem;
            font-size: 0.9rem;
            color: #777;
        }

        @media (max-width: 768px) {
            .top-navbar {
                flex-direction: column;
                align-items: stretch;
                padding: 1rem;
            }

            .top-navbar .logo {
                font-size: 1.5rem;
                margin-bottom: 0.5rem;
            }


            .auth-links,
            #user-section {
                width: 100%;
                justify-content: center;
                text-align: center;
            }

            .auth-links a,
            #user-section a,
            #user-section button {
                margin: 0.3rem 0.4rem;
            }

            .sub-navbar {
                flex-direction: column;
                align-items: center;
                padding: 1rem 0.5rem;
                top: 168px;
            }

            .sub-navbar a {
                margin: 0.4rem 0;
                font-size: 1rem;
            }

            .hero-section {
                flex-direction: column;
                margin-top: 170px;
            }

            .hero-left,
            .hero-right {
                width: 100%;
                padding: 3rem 2rem;
                text-align: center;
            }

            .hero-content h1 {
                font-size: 2rem;
            }

            .hero-content p {
                font-size: 1rem;
            }

            .hero-right img {
                max-width: 80%;
            }

            .footer-content {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>

<body>

    <!-- Top Navbar -->
    <nav class="top-navbar">
        <a href="index.html" class="logo"><span>Medi</span><span>Plus</span></a>
        <div class="auth-links" id="auth-links">
            <a href="login.html"><i class="fas fa-sign-in-alt"></i></a>
            <a href="registration.html"><i class="fas fa-user-plus"></i></a>
        </div>
        <div id="user-section" style="text-align: right; padding: 10px 20px;"></div>
    </nav>

    <!-- Sub Navbar -->
    <nav class="sub-navbar">
        <a href="doctor_search.html">Search Doctors</a>
        <a href="faq.html">Disease Prediction</a>
    </nav>

    <!-- Hero Section -->
    <section class="hero-section">
        <div class="hero-left">
            <div class="hero-content">
                <h1>Your Health, Our Priority</h1>
                <p>Delivering quality care with compassion and excellence.</p>
                <a href="appointment.html" class="appointment-box">Book an Appointment</a>
            </div>
        </div>
        <div class="hero-right">
            <img src="heroimg.png" alt="Doctors" />
        </div>
    </section>

    <!-- Footer -->
    <footer>
        <div class="footer-content">
            <div>
                <h3>About MediPlus</h3>
                <p>MediPlus is a web-based platform facilitating seamless management of healthcare services, including
                    appointments, patient records, and doctor interactions.</p>
            </div>
            <div>
                <h3>Quick Links</h3>
                <ul>
                    <li><a href="index.html">Home</a></li>
                    <li><a href="doctor_search.html">Search Doctors</a></li>
                    <li><a href="faq.html">Disease Prediction</a></li>
                    <li><a href="appointment.html">Book Appointment</a></li>
                </ul>
            </div>
            <div>
                <h3>Contact Us</h3>
                <p>Email: support@mediplus.com</p>
                <p>Phone: +91-12345-67890</p>
                <p>Address: 123, Health Street, Kolkata</p>
            </div>
            <div>
                <h3>Follow Us</h3>
                <div style="font-size: 1.5rem;">
                    <a href="#"><i class="fab fa-facebook"></i></a>
                    <a href="#"><i class="fab fa-twitter"></i></a>
                    <a href="#"><i class="fab fa-instagram"></i></a>
                    <a href="#"><i class="fab fa-linkedin"></i></a>
                </div>
            </div>
        </div>
        <div class="footer-bottom">
            &copy; 2025 MediPlus. All rights reserved.
            <p>Designed with ❤️ for better healthcare accessibility.</p>
        </div>
    </footer>

    <script>
        const userSection = document.getElementById("user-section");
        const authLinks = document.getElementById("auth-links");
        sessionStorage.getItem("loggedInUser");
        localStorage.setItem("isLoggedIn", "true"); // (Unused)
        // Check auth status on page load
        fetch("/api/check-auth")
            .then(response => response.json())
            .then(data => {
                if (data.user) {
                    // User is logged in: Hide auth-links, show welcome message
                    authLinks.style.display = "none";
                    userSection.innerHTML = `
                    <span style="font-weight: bold; font-size: 18px;">Welcome, ${data.user.name}!</span>
                    <button onclick="logout()" style="margin-left: 10px; padding: 6px 12px; border: none; background-color: #e74c3c; color: white; border-radius: 4px; cursor: pointer;">Logout</button>
                `;
                } else {
                    // User is logged out: Show auth-links, hide welcome message
                    authLinks.style.display = "flex";
                    userSection.innerHTML = ""; // Clear user-section (optional)
                }
            })
            .catch(error => {
                console.error("Auth check failed:", error);
                authLinks.style.display = "flex"; // Fallback: Show auth links
            });

        // Logout function
        function logout() {
            fetch("/api/logout", { method: "POST" })
                .then(() => window.location.reload());
        }
    </script>

    <script>
        // Smooth scroll for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();

                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });
    </script>

</body>

</html>























<!-- ------------------------------------------------------------------------------------------------
 IN CASE OF USING SQL; Use this faq.html CODE

 !DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FAQ - Hospital Management System</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
        }

        h1 {
            text-align: center;
            margin-bottom: 30px;
        }

        .faq-container {
            max-width: 800px;
            margin: auto;
        }

        .faq-item {
            margin-bottom: 20px;
        }

        .faq-question {
            background-color: #f2f2f2;
            padding: 15px;
            cursor: pointer;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s;
        }

        .faq-question:hover {
            background-color: #e6e6e6;
        }

        .faq-answer {
            display: none;
            padding: 15px;
            background-color: #fff;
            border-left: 3px solid #5cb85c;
            border: 1px solid #ccc;
            border-top: none;
            border-radius: 0 0 5px 5px;
        }

        /* Additional styles for the symptom input section */
        .symptom-section {
            margin-top: 20px;
        }

        textarea {
            width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
        }

        button {
            padding: 10px 15px;
            background-color: #5cb85c;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

        button:hover {
            background-color: #4cae4c;
        }
    </style>
    <script>
        function toggleAnswer(index) {
            const answer = document.getElementById(`answer-${index}`);
            answer.style.display = (answer.style.display === "block") ? "none" : "block";
        }

        // Function to submit symptoms and predict the disease
        function submitSymptoms() {
            const symptomsText = document.getElementById('symptoms-text').value;

            if (!symptomsText) {
                alert('Please enter symptoms.');
                return;
            }

            // Send symptoms data to the backend for prediction
            fetch('/predict', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ symptoms: symptomsText }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.prediction) {
                        alert(`Predicted disease: ${data.prediction}`);
                    } else {
                        alert('No matching disease found.');
                    }
                })
                .catch(error => {
                    console.error('Error during prediction:', error);
                    alert('Error during prediction.');
                });
        }
    </script>
</head>

<body>
    <h1>FAQs - Hospital Management System</h1>
    <div class="faq-container">
        // FAQ questions here 

        <div class="faq-item">
            <div class="faq-question" onclick="toggleAnswer(1)">
                What is a hospital management system?
            </div>
            <div class="faq-answer" id="answer-1">
                A hospital management system is a digital solution designed to streamline hospital operations,
                including patient registration, appointment scheduling, billing, and record management.
            </div>
        </div>
        <div class="faq-item">
            <div class="faq-question" onclick="toggleAnswer(2)">
                How can I book an appointment using the system?
            </div>
            <div class="faq-answer" id="answer-2">
                You can book an appointment by logging into the patient portal, selecting your preferred doctor,
                date, and time, and submitting your request. You will receive a confirmation message once the
                appointment is booked.
            </div>
        </div>
        <div class="faq-item">
            <div class="faq-question" onclick="toggleAnswer(3)">
                Is my personal information secure?
            </div>
            <div class="faq-answer" id="answer-3">
                Yes, the system uses advanced encryption methods to protect your data, ensuring that all personal and
                medical
                information remains confidential and secure.
            </div>
        </div>
        <div class="faq-item">
            <div class="faq-question" onclick="toggleAnswer(4)">
                Can I access my medical records through the system?
            </div>
            <div class="faq-answer" id="answer-4">
                Yes, patients can access their medical records, including test results and prescriptions, via the
                patient portal.
            </div>
        </div>
        <div class="faq-item">
            <div class="faq-question" onclick="toggleAnswer(5)">
                How can I contact support if I face an issue?
            </div>
            <div class="faq-answer" id="answer-5">
                You can reach out to the support team via the contact us page or by calling the helpline number provided
                on the system's homepage.
            </div>
        </div>

        // Symptom Input Section for Prediction
        <div class="faq-item symptom-section">
            <div class="faq-question" onclick="toggleAnswer(6)">
                Enter Symptoms for Prediction
            </div>
            <div class="faq-answer" id="answer-6">
                <textarea id="symptoms-text" placeholder="Enter symptoms here, separated by commas..."></textarea><br>
                <button type="button" onclick="submitSymptoms()">Predict Disease</button>
            </div>
        </div>
    </div>
</body>

</html> -->

--------------------------------------------------------------------------------------------------------------------------------------------------------


















server.js content



//openai texts
// import OpenAI from "openai";

// const openai = new OpenAI({
//   apiKey: "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",
// });

// const completion = openai.chat.completions.create({
//   model: "gpt-4o-mini",
//   store: true,
//   messages: [
//     {"role": "user", "content": "write a haiku about ai"},
//   ],
// });

// completion.then((result) => console.log(result.choices[0].message));






// --------------------------------------------------------------------------------------------
//IN CASE OF SQL USE; USE THIS server.js code

// const express = require('express');
// const mysql = require('mysql2');
// const app = express();
// const port = 3000;

// app.use(express.static('public'));

// // Create MySQL database connection
// const connection = mysql.createConnection({
//     host: 'localhost', // Your MySQL host (usually 'localhost')
//     user: 'root', // Your MySQL username
//     password: 'Mridulmeet1.', // Your MySQL password
//     database: 'HospitalManagement' // Your database name
// });

// // Test MySQL connection
// connection.connect((err) => {
//     if (err) {
//         console.error('Error connecting to the database: ', err);
//     } else {
//         console.log('Connected to the database!');
//     }
// });

// // Serve static files (optional, if you have frontend files)
// app.use(express.static('public')); // 'public' is the directory for your frontend files

// // Parse JSON requests
// app.use(express.json());

// // Sample route: Fetch diseases
// app.get('/diseases', (req, res) => {
//     connection.query('SELECT * FROM Diseases', (err, results) => {
//         if (err) {
//             console.error(err);
//             res.status(500).send('Error fetching diseases');
//         } else {
//             res.json(results);
//         }
//     });
// });

// // Route to fetch symptoms for a particular disease
// app.get('/symptoms/:disease_id', (req, res) => {
//     const diseaseId = req.params.disease_id;
//     connection.query(
//         SELECT s.symptom_name, m.weight
//          FROM Disease_Symptom_Map m
//          JOIN Symptoms s ON m.symptom_id = s.symptom_id
//          WHERE m.disease_id = ?,
//         [diseaseId],
//         (err, results) => {
//             if (err) {
//                 console.error(err);
//                 res.status(500).send('Error fetching symptoms');
//             } else {
//                 res.json(results);
//             }
//         }
//     );
// });

// // POST route for prediction based on symptoms
// app.post('/predict', (req, res) => {
//     const symptomsText = req.body.symptoms;

//     if (!symptomsText || symptomsText.trim() === '') {
//         return res.status(400).json({ error: 'Please enter some symptoms.' });
//     }

//     // Split the symptoms from the text input, assuming they are comma-separated
//     const symptomsArray = symptomsText.split(',').map(symptom => symptom.trim());

//     // Query to fetch diseases and their related symptoms
//     let query = 
//         SELECT d.disease_name, s.symptom_name, m.weight
//         FROM Disease_Symptom_Map m
//         JOIN Diseases d ON m.disease_id = d.disease_id
//         JOIN Symptoms s ON m.symptom_id = s.symptom_id
//         WHERE s.symptom_name IN (?)
//     ;

//     connection.query(query, [symptomsArray], (err, results) => {
//         if (err) {
//             console.error(err);
//             return res.status(500).json({ error: 'Error fetching data from the database.' });
//         }

//         // Score diseases based on symptom matching
//         let diseaseScores = {};

//         results.forEach(row => {
//             const diseaseName = row.disease_name;
//             const weight = row.weight;

//             if (!diseaseScores[diseaseName]) {
//                 diseaseScores[diseaseName] = 0;
//             }

//             diseaseScores[diseaseName] += weight;
//         });

//         // Find the disease with the highest score
//         let predictedDisease = null;
//         let highestScore = 0;

//         for (let disease in diseaseScores) {
//             if (diseaseScores[disease] > highestScore) {
//                 highestScore = diseaseScores[disease];
//                 predictedDisease = disease;
//             }
//         }

//         if (predictedDisease) {
//             res.json({ prediction: predictedDisease });
//         } else {
//             res.status(404).json({ error: 'No matching disease found' });
//         }
//     });
// });

// // Start the server
// app.listen(port, () => {
//     console.log(Server running at http://localhost:${port});
// });